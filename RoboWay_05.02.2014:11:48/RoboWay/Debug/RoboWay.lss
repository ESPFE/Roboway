
RoboWay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000045e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b87  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000504  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002bb  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a7  00000000  00000000  00002c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000031ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 2d 02 	jmp	0x45a	; 0x45a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adxl354Init>:

#include "./adxl354.h"


uint8_t adxl354Init( uint8_t addr, uint8_t bwRate )
{
  96:	cf 93       	push	r28
  98:	c6 2f       	mov	r28, r22
    if( ! i2cStart( I2C_WRITE( addr ) ) )
  9a:	0e 94 c8 00 	call	0x190	; 0x190 <i2cStart>
  9e:	88 23       	and	r24, r24
  a0:	71 f0       	breq	.+28     	; 0xbe <adxl354Init+0x28>
    {
        return false;
    }
    if( ! i2cWrite( ADXL354_REG_CTL_BW_RATE ) )
  a2:	8c e2       	ldi	r24, 0x2C	; 44
  a4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2cWrite>
  a8:	88 23       	and	r24, r24
  aa:	59 f0       	breq	.+22     	; 0xc2 <adxl354Init+0x2c>
    {
        return false;
    }
    if( ! i2cWrite( bwRate ) )
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2cWrite>
  b2:	88 23       	and	r24, r24
  b4:	41 f0       	breq	.+16     	; 0xc6 <adxl354Init+0x30>
    {
        return false;
    }
    i2cStop();
  b6:	0e 94 bf 00 	call	0x17e	; 0x17e <i2cStop>
    return true;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <adxl354Init+0x32>

uint8_t adxl354Init( uint8_t addr, uint8_t bwRate )
{
    if( ! i2cStart( I2C_WRITE( addr ) ) )
    {
        return false;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <adxl354Init+0x32>
    }
    if( ! i2cWrite( ADXL354_REG_CTL_BW_RATE ) )
    {
        return false;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <adxl354Init+0x32>
    }
    if( ! i2cWrite( bwRate ) )
    {
        return false;
  c6:	80 e0       	ldi	r24, 0x00	; 0
    }
    i2cStop();
    return true;
}
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <adxl354GetAccel>:
    return true;
}


uint8_t adxl354GetAccel( uint8_t addr, int16_t *x, int16_t *y, int16_t *z )
{
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	d8 2e       	mov	r13, r24
  dc:	7b 01       	movw	r14, r22
  de:	8a 01       	movw	r16, r20
  e0:	e9 01       	movw	r28, r18
    i2cStart( I2C_WRITE( addr ) );
  e2:	0e 94 c8 00 	call	0x190	; 0x190 <i2cStart>
   /* {
		usart0PrintStr( "Fehler bei adxl354GetAccel() i2cStart\n" );
        return false;
    }*/
    if( ! i2cWrite( ADXL354_REG_DATAX_L ) )
  e6:	82 e3       	ldi	r24, 0x32	; 50
  e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2cWrite>
  ec:	81 11       	cpse	r24, r1
  ee:	06 c0       	rjmp	.+12     	; 0xfc <adxl354GetAccel+0x30>
    {
		usart0PrintStr( "Fehler bei adxl354GetAccel() i2cWrite\n" );
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
        return false;
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	23 c0       	rjmp	.+70     	; 0x142 <adxl354GetAccel+0x76>
    }
	i2cRepStart( I2C_READ( addr ) );
  fc:	8d 2d       	mov	r24, r13
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	0e 94 c8 00 	call	0x190	; 0x190 <i2cStart>
    *x = i2cReadAck();
 104:	0e 94 09 01 	call	0x212	; 0x212 <i2cReadAck>
 108:	f7 01       	movw	r30, r14
 10a:	80 83       	st	Z, r24
 10c:	11 82       	std	Z+1, r1	; 0x01
    *x = i2cReadAck() << 8;
 10e:	0e 94 09 01 	call	0x212	; 0x212 <i2cReadAck>
 112:	f7 01       	movw	r30, r14
 114:	10 82       	st	Z, r1
 116:	81 83       	std	Z+1, r24	; 0x01
    *y = i2cReadAck();
 118:	0e 94 09 01 	call	0x212	; 0x212 <i2cReadAck>
 11c:	f8 01       	movw	r30, r16
 11e:	80 83       	st	Z, r24
 120:	11 82       	std	Z+1, r1	; 0x01
    *y = i2cReadAck() << 8;
 122:	0e 94 09 01 	call	0x212	; 0x212 <i2cReadAck>
 126:	f8 01       	movw	r30, r16
 128:	10 82       	st	Z, r1
 12a:	81 83       	std	Z+1, r24	; 0x01
    *z = i2cReadAck();
 12c:	0e 94 09 01 	call	0x212	; 0x212 <i2cReadAck>
 130:	88 83       	st	Y, r24
 132:	19 82       	std	Y+1, r1	; 0x01
    *z = i2cReadNak() << 8;
 134:	0e 94 14 01 	call	0x228	; 0x228 <i2cReadNak>
 138:	18 82       	st	Y, r1
 13a:	89 83       	std	Y+1, r24	; 0x01
    i2cStop();
 13c:	0e 94 bf 00 	call	0x17e	; 0x17e <i2cStop>
    return true;
 140:	81 e0       	ldi	r24, 0x01	; 1
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	df 90       	pop	r13
 150:	08 95       	ret

00000152 <i2cInit>:

#include "i2cmaster.h"


void i2cInit( unsigned long sclMode )
{
 152:	9b 01       	movw	r18, r22
 154:	ac 01       	movw	r20, r24
    // set statusregister to 0x00;
    TWSR = 0x00;
 156:	10 92 b9 00 	sts	0x00B9, r1
    // set clockrate
    TWBR = ( ( F_CPU / ( sclMode ) ) - 16 ) / 2;
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	74 e2       	ldi	r23, 0x24	; 36
 15e:	84 ef       	ldi	r24, 0xF4	; 244
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 166:	da 01       	movw	r26, r20
 168:	c9 01       	movw	r24, r18
 16a:	40 97       	sbiw	r24, 0x10	; 16
 16c:	a1 09       	sbc	r26, r1
 16e:	b1 09       	sbc	r27, r1
 170:	b6 95       	lsr	r27
 172:	a7 95       	ror	r26
 174:	97 95       	ror	r25
 176:	87 95       	ror	r24
 178:	80 93 b8 00 	sts	0x00B8, r24
 17c:	08 95       	ret

0000017e <i2cStop>:


void i2cStop(void)
{
    /* send stop condition */
	TWCR = ( 1<<TWINT ) | ( 1<<TWEN ) | ( 1<<TWSTO );
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	80 93 bc 00 	sts	0x00BC, r24

	// wait until stop condition is executed and bus released
	while( TWCR & ( 1 << TWSTO ) );
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 fd       	sbrc	r24, 4
 18c:	fd cf       	rjmp	.-6      	; 0x188 <i2cStop+0xa>
}
 18e:	08 95       	ret

00000190 <i2cStart>:
uint8_t i2cStart( uint8_t addr )
{
    uint8_t twst;

	// send START condition
	TWCR = ( 1<<TWINT ) | ( 1<<TWSTA ) | ( 1<<TWEN );
 190:	94 ea       	ldi	r25, 0xA4	; 164
 192:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while( !( TWCR & ( 1 << TWINT ) ) );
 196:	ec eb       	ldi	r30, 0xBC	; 188
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	99 23       	and	r25, r25
 19e:	ec f7       	brge	.-6      	; 0x19a <i2cStart+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1a0:	90 91 b9 00 	lds	r25, 0x00B9
 1a4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START))
 1a6:	98 30       	cpi	r25, 0x08	; 8
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <i2cStart+0x26>
 1aa:	90 31       	cpi	r25, 0x10	; 16
 1ac:	21 f0       	breq	.+8      	; 0x1b6 <i2cStart+0x26>
	{
	    i2cStop();
 1ae:	0e 94 bf 00 	call	0x17e	; 0x17e <i2cStop>
        return I2C_FAIL;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
	}

	// send device address
	TWDR = addr;
 1b6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 1ba:	84 e8       	ldi	r24, 0x84	; 132
 1bc:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <i2cStart+0x34>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1ca:	80 91 b9 00 	lds	r24, 0x00B9
 1ce:	88 7f       	andi	r24, 0xF8	; 248
	if( ( twst != TW_MT_SLA_ACK ) && ( twst != TW_MR_SLA_ACK ) )
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <i2cStart+0x50>
 1d4:	80 34       	cpi	r24, 0x40	; 64
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <i2cStart+0x54>
	{
	    i2cStop();
 1d8:	0e 94 bf 00 	call	0x17e	; 0x17e <i2cStop>
	    return I2C_FAIL;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
	}

	return I2C_OK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
 1e4:	81 e0       	ldi	r24, 0x01	; 1

}
 1e6:	08 95       	ret

000001e8 <i2cWrite>:
uint8_t i2cWrite( uint8_t data )
{
    uint8_t twst;

	// send data to the previously addressed device
	TWDR = data;
 1e8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ( 1 << TWINT ) | ( 1<<TWEN );
 1ec:	84 e8       	ldi	r24, 0x84	; 132
 1ee:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while( ! ( TWCR & ( 1<<TWINT ) ) );
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <i2cWrite+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 1fc:	80 91 b9 00 	lds	r24, 0x00B9
 200:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK )
 202:	88 32       	cpi	r24, 0x28	; 40
 204:	21 f0       	breq	.+8      	; 0x20e <i2cWrite+0x26>
	{
	    i2cStop();
 206:	0e 94 bf 00 	call	0x17e	; 0x17e <i2cStop>
	    return I2C_FAIL;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
	}
	return I2C_OK;
 20e:	81 e0       	ldi	r24, 0x01	; 1

}
 210:	08 95       	ret

00000212 <i2cReadAck>:


uint8_t i2cReadAck( void )
{
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN ) | ( 1 << TWEA );
 212:	84 ec       	ldi	r24, 0xC4	; 196
 214:	80 93 bc 00 	sts	0x00BC, r24
	while( ! ( TWCR & ( 1 << TWINT ) ) );
 218:	ec eb       	ldi	r30, 0xBC	; 188
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <i2cReadAck+0xa>

    return TWDR;
 222:	80 91 bb 00 	lds	r24, 0x00BB
}
 226:	08 95       	ret

00000228 <i2cReadNak>:


unsigned char i2cReadNak(void)
{
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
 228:	84 e8       	ldi	r24, 0x84	; 132
 22a:	80 93 bc 00 	sts	0x00BC, r24
	while( ! ( TWCR & ( 1 << TWINT ) ) );
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <i2cReadNak+0xa>

    return TWDR;
 238:	80 91 bb 00 	lds	r24, 0x00BB
}
 23c:	08 95       	ret

0000023e <main>:



int main(void)
{
    roboWayInit();
 23e:	0e 94 2f 01 	call	0x25e	; 0x25e <roboWayInit>
    roboWayLoop();
 242:	0e 94 53 01 	call	0x2a6	; 0x2a6 <roboWayLoop>
 246:	ff cf       	rjmp	.-2      	; 0x246 <main+0x8>

00000248 <mCInit>:


void mCInit( void )
{
    // Set motor controll pins as output
    MC_DDR |= ( 1 << MC_LEFT ) | ( 1 << MC_LEFT_FW ) | ( 1 << MC_LEFT_BW ) |
 248:	8a b1       	in	r24, 0x0a	; 10
 24a:	8c 6f       	ori	r24, 0xFC	; 252
 24c:	8a b9       	out	0x0a, r24	; 10
			( 1 << MC_RIGHT ) | ( 1 << MC_RIGHT_FW ) | ( 1 << MC_RIGHT_BW );
    // Setup Timer 0
    // ( 1 << WGM00 )  | ( 1 << WGM01 )     =>  Fast PWM Mode
    // ( 1 << COM0A1 )                      =>  Clear OC0A on compare match (MC_RIGHT)
    // ( 1 << COM0B1 )                      =>  Clear OC0B on compare match (MC_LEFT)
    TCCR0A = ( 1 << WGM00 ) | ( 1 << WGM01 ) |
 24e:	83 ea       	ldi	r24, 0xA3	; 163
 250:	84 bd       	out	0x24, r24	; 36
             ( 1 << COM0A1 ) | ( 1 << COM0B1 );
    // ( 1 << CS00 )                        =>  Use internal OSC, not prescaler
    TCCR0B = ( 1 << CS00 );
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	85 bd       	out	0x25, r24	; 37
    // Reset Timer
    TCNT0 = 0x00;
 256:	16 bc       	out	0x26, r1	; 38
    MC_LEFT_OCR = 0x00;
 258:	18 bc       	out	0x28, r1	; 40
    MC_RIGHT_OCR = 0x00;
 25a:	17 bc       	out	0x27, r1	; 39
 25c:	08 95       	ret

0000025e <roboWayInit>:

#include "roboWay.h"

void roboWayInit()
{
    mCInit();
 25e:	0e 94 24 01 	call	0x248	; 0x248 <mCInit>
	i2cInit( I2C_SCL_HIGH );
 262:	60 e8       	ldi	r22, 0x80	; 128
 264:	7a e1       	ldi	r23, 0x1A	; 26
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 a9 00 	call	0x152	; 0x152 <i2cInit>
    if( ! adxl354Init( ADXL354_STD_DEVID, ADXL354_REG_BW_RATE_400 ) )
 26e:	6c e0       	ldi	r22, 0x0C	; 12
 270:	85 ee       	ldi	r24, 0xE5	; 229
 272:	0e 94 4b 00 	call	0x96	; 0x96 <adxl354Init>
 276:	81 11       	cpse	r24, r1
 278:	04 c0       	rjmp	.+8      	; 0x282 <roboWayInit+0x24>
	{
		usart0PrintStr( "Fehler bei adxl354Init()\n" );
 27a:	87 e2       	ldi	r24, 0x27	; 39
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
	}
	setupUsart0( 9600 );
 282:	60 e8       	ldi	r22, 0x80	; 128
 284:	75 e2       	ldi	r23, 0x25	; 37
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <setupUsart0>
    //adxl354SetupInt( );
	DDRD |= 1 << PD2;
 28e:	52 9a       	sbi	0x0a, 2	; 10
	usart0PrintStr( "init\n" );
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <roboWayInit+0x3e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <roboWayInit+0x44>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <roboWayLoop>:
	_delay_ms( 10 );
}

void roboWayLoop( void )
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <roboWayLoop+0x6>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <roboWayLoop+0x8>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <roboWayLoop+0xa>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
	int16_t accX = 20;
 2b4:	84 e1       	ldi	r24, 0x14	; 20
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01
	int16_t accY = 0;
 2bc:	1c 82       	std	Y+4, r1	; 0x04
 2be:	1b 82       	std	Y+3, r1	; 0x03
	int16_t accZ = 0;
 2c0:	1e 82       	std	Y+6, r1	; 0x06
 2c2:	1d 82       	std	Y+5, r1	; 0x05
	
	usart0PrintStr( "Vor adxl354GetAccel()\n" );
 2c4:	87 e4       	ldi	r24, 0x47	; 71
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
	
	if( ! adxl354GetAccel( ADXL354_STD_DEVID, &accX, &accY, &accZ ) )
 2cc:	9e 01       	movw	r18, r28
 2ce:	2b 5f       	subi	r18, 0xFB	; 251
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	ae 01       	movw	r20, r28
 2d4:	4d 5f       	subi	r20, 0xFD	; 253
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	be 01       	movw	r22, r28
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	85 ee       	ldi	r24, 0xE5	; 229
 2e0:	0e 94 66 00 	call	0xcc	; 0xcc <adxl354GetAccel>
 2e4:	81 11       	cpse	r24, r1
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <roboWayLoop+0x4c>
	{
		usart0PrintStr( "Fehler bei adxl354GetAccel()\n" );
 2e8:	8e e5       	ldi	r24, 0x5E	; 94
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <roboWayLoop+0x56>
	}
	else
	{
		PORTD |= 1 << PD2;
 2f2:	5a 9a       	sbi	0x0b, 2	; 11
		usart0PrintStr( "adxl354GetAccel() OK\n" );
 2f4:	8c e7       	ldi	r24, 0x7C	; 124
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usart0PrintStr>
	}
	
	usart0Transmit( accX );
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <usart0Transmit>
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	81 ee       	ldi	r24, 0xE1	; 225
 306:	94 e0       	ldi	r25, 0x04	; 4
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <roboWayLoop+0x62>
 310:	00 c0       	rjmp	.+0      	; 0x312 <roboWayLoop+0x6c>
 312:	00 00       	nop
 314:	f6 cf       	rjmp	.-20     	; 0x302 <roboWayLoop+0x5c>

00000316 <setUsartBaudRate>:
#include "usart.h"


void setUsartBaudRate( uint32_t usartBaudRate )
{
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	6b 01       	movw	r12, r22
 320:	7c 01       	movw	r14, r24
    // liegt Baudrate noch im Toleranzbereich?? ( +/- 5% )
    if( USART_BAUD_CALC( usartBaudRate ) > 30 )
 322:	dc 01       	movw	r26, r24
 324:	cb 01       	movw	r24, r22
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	aa 1f       	adc	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	9c 01       	movw	r18, r24
 338:	ad 01       	movw	r20, r26
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	44 1f       	adc	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	44 1f       	adc	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	74 e2       	ldi	r23, 0x24	; 36
 34e:	84 ef       	ldi	r24, 0xF4	; 244
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 356:	da 01       	movw	r26, r20
 358:	c9 01       	movw	r24, r18
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	a1 09       	sbc	r26, r1
 35e:	b1 09       	sbc	r27, r1
 360:	8f 31       	cpi	r24, 0x1F	; 31
 362:	91 05       	cpc	r25, r1
 364:	a1 05       	cpc	r26, r1
 366:	b1 05       	cpc	r27, r1
 368:	60 f0       	brcs	.+24     	; 0x382 <setUsartBaudRate+0x6c>
    {
        UBRR0H = (uint8_t)HIGH_BYTE( USART_BAUD_CALC( usartBaudRate ) );
 36a:	89 2f       	mov	r24, r25
 36c:	9a 2f       	mov	r25, r26
 36e:	ab 2f       	mov	r26, r27
 370:	bb 27       	eor	r27, r27
 372:	80 93 c5 00 	sts	0x00C5, r24
        UBRR0L = (uint8_t)LOW_BYTE( USART_BAUD_CALC( usartBaudRate ) );
 376:	21 50       	subi	r18, 0x01	; 1
 378:	20 93 c4 00 	sts	0x00C4, r18
        UCSR0A = 0x00;
 37c:	10 92 c0 00 	sts	0x00C0, r1
 380:	25 c0       	rjmp	.+74     	; 0x3cc <setUsartBaudRate+0xb6>
    }
    // Ansonsten Doppelte Baudrate verwenden
    else
    {
        UBRR0H = (uint8_t)HIGH_BYTE( USART_DOUBLE_BAUD_CALC( usartBaudRate ) );
 382:	cc 0c       	add	r12, r12
 384:	dd 1c       	adc	r13, r13
 386:	ee 1c       	adc	r14, r14
 388:	ff 1c       	adc	r15, r15
 38a:	cc 0c       	add	r12, r12
 38c:	dd 1c       	adc	r13, r13
 38e:	ee 1c       	adc	r14, r14
 390:	ff 1c       	adc	r15, r15
 392:	a7 01       	movw	r20, r14
 394:	96 01       	movw	r18, r12
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	44 1f       	adc	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	74 e2       	ldi	r23, 0x24	; 36
 3a2:	84 ef       	ldi	r24, 0xF4	; 244
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 3aa:	da 01       	movw	r26, r20
 3ac:	c9 01       	movw	r24, r18
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	89 2f       	mov	r24, r25
 3b6:	9a 2f       	mov	r25, r26
 3b8:	ab 2f       	mov	r26, r27
 3ba:	bb 27       	eor	r27, r27
 3bc:	80 93 c5 00 	sts	0x00C5, r24
        UBRR0L = (uint8_t)LOW_BYTE( USART_DOUBLE_BAUD_CALC( usartBaudRate ) );
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	20 93 c4 00 	sts	0x00C4, r18
        UCSR0A = ( 1 << U2X0 );
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	80 93 c0 00 	sts	0x00C0, r24
    }
}
 3cc:	ff 90       	pop	r15
 3ce:	ef 90       	pop	r14
 3d0:	df 90       	pop	r13
 3d2:	cf 90       	pop	r12
 3d4:	08 95       	ret

000003d6 <setupUsart0>:

// USART0 initialisieren
void setupUsart0( uint32_t usartBaudRate )
{
    // BaudRate einstellen
    setUsartBaudRate( usartBaudRate );
 3d6:	0e 94 8b 01 	call	0x316	; 0x316 <setUsartBaudRate>
    // RX, TX und Interrupts einschalten
    UCSR0B = ( 1 << RXEN0 ) | ( 1 << TXEN0 ) | ( 1 << RXCIE0 );
 3da:	88 e9       	ldi	r24, 0x98	; 152
 3dc:	80 93 c1 00 	sts	0x00C1, r24
    // 8n1 -> 1 Startbit , 8 Datenbits , 1 Stopbit
    UCSR0C = ( 1 << UCSZ00 ) | ( 1 << UCSZ01 );
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	80 93 c2 00 	sts	0x00C2, r24
 3e6:	08 95       	ret

000003e8 <usart0Transmit>:

// SENDEN an USART0
void usart0Transmit( uint8_t data )
{
    // warten, bis senderegister frei
    while( !( UCSR0A & ( 1 << UDRE0 ) ) );
 3e8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	90 81       	ld	r25, Z
 3ee:	95 ff       	sbrs	r25, 5
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <usart0Transmit+0x4>
    // und ab dafür
    UDR0 = data;
 3f2:	80 93 c6 00 	sts	0x00C6, r24
 3f6:	08 95       	ret

000003f8 <usart0PrintStr>:
}


void usart0PrintStr( char str[] )
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
    while( *str != '\0' )
 3fe:	88 81       	ld	r24, Y
 400:	88 23       	and	r24, r24
 402:	31 f0       	breq	.+12     	; 0x410 <usart0PrintStr+0x18>
    // und ab dafür
    UDR0 = data;
}


void usart0PrintStr( char str[] )
 404:	21 96       	adiw	r28, 0x01	; 1
{
    while( *str != '\0' )
    {
        usart0Transmit( (uint8_t)(*str) );
 406:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <usart0Transmit>
}


void usart0PrintStr( char str[] )
{
    while( *str != '\0' )
 40a:	89 91       	ld	r24, Y+
 40c:	81 11       	cpse	r24, r1
 40e:	fb cf       	rjmp	.-10     	; 0x406 <usart0PrintStr+0xe>
    {
        usart0Transmit( (uint8_t)(*str) );
        ++str;
    }
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <__udivmodsi4>:
 416:	a1 e2       	ldi	r26, 0x21	; 33
 418:	1a 2e       	mov	r1, r26
 41a:	aa 1b       	sub	r26, r26
 41c:	bb 1b       	sub	r27, r27
 41e:	fd 01       	movw	r30, r26
 420:	0d c0       	rjmp	.+26     	; 0x43c <__udivmodsi4_ep>

00000422 <__udivmodsi4_loop>:
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	ee 1f       	adc	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	a2 17       	cp	r26, r18
 42c:	b3 07       	cpc	r27, r19
 42e:	e4 07       	cpc	r30, r20
 430:	f5 07       	cpc	r31, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__udivmodsi4_ep>
 434:	a2 1b       	sub	r26, r18
 436:	b3 0b       	sbc	r27, r19
 438:	e4 0b       	sbc	r30, r20
 43a:	f5 0b       	sbc	r31, r21

0000043c <__udivmodsi4_ep>:
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a 94       	dec	r1
 446:	69 f7       	brne	.-38     	; 0x422 <__udivmodsi4_loop>
 448:	60 95       	com	r22
 44a:	70 95       	com	r23
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	cf 01       	movw	r24, r30
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>


RoboWay_MotorControll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000026a  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c8  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002aa  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016c  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000011eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <mCInit>:


void mCInit( void )
{
    // Set MC_LEFT and MC_RIGHT as output
    DDRD |= ( 1 << MC_LEFT ) | ( 1 << MC_RIGHT );
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 66       	ori	r24, 0x60	; 96
  84:	8a b9       	out	0x0a, r24	; 10
    // Setup Timer 0
    // ( 1 << WGM00 )  | ( 1 << WGM01 )     =>  Fast PWM Mode
    // ( 1 << COM0A1 )                      =>  Clear OC0A on compare match (MC_RIGHT)
    // ( 1 << COM0B1 )                      =>  Clear OC0B on compare match (MC_LEFT)
    TCCR0A = ( 1 << WGM00 ) | ( 1 << WGM01 ) |
  86:	83 ea       	ldi	r24, 0xA3	; 163
  88:	84 bd       	out	0x24, r24	; 36
             ( 1 << COM0A1 ) | ( 1 << COM0B1 );
    // ( 1 << CS00 )                        =>  Use internal OSC, not prescaler
    TCCR0B = ( 1 << CS00 );
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	85 bd       	out	0x25, r24	; 37
    // Reset Timer
    TCNT0 = 0x00;
  8e:	16 bc       	out	0x26, r1	; 38
    MC_LEFT_OCR = 0x00;
  90:	18 bc       	out	0x28, r1	; 40
    MC_RIGHT_OCR = 0x00;
  92:	17 bc       	out	0x27, r1	; 39
  94:	08 95       	ret

00000096 <mCSetSpeedLeft>:
}


void mCSetSpeedLeft( uint8_t val )
{
    MC_LEFT_OCR = val;
  96:	88 bd       	out	0x28, r24	; 40
  98:	08 95       	ret

0000009a <mCSetSpeedRight>:
}


void mCSetSpeedRight( uint8_t val )
{
    MC_RIGHT_OCR = val;
  9a:	87 bd       	out	0x27, r24	; 39
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
    uint8_t i = 0;

    mCInit();
  9e:	0e 94 40 00 	call	0x80	; 0x80 <mCInit>



int main(void)
{
    uint8_t i = 0;
  a2:	c0 e0       	ldi	r28, 0x00	; 0

    mCInit();

    while(1)
    {
        mCSetSpeedLeft( i );
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 4b 00 	call	0x96	; 0x96 <mCSetSpeedLeft>
        mCSetSpeedRight( i );
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 4d 00 	call	0x9a	; 0x9a <mCSetSpeedRight>
        i += 1;
  b0:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1e>
  bc:	00 00       	nop
  be:	f2 cf       	rjmp	.-28     	; 0xa4 <main+0x6>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
